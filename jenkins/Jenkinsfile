#!groovy
pipeline {

  agent any

  tools {
    jdk 'jdk 8'
    maven 'mvn 3.8'
  }

  parameters {
    string(name: 'BRANCH', defaultValue: 'master', description: 'Branch to build')
    string(name: 'PENDING_PROVIDER', defaultValue: '', description: 'Name of Provider makes breaking change')
    string(name: 'PROVIDER_BRANCH_NAME', defaultValue: '', description: 'Branch name of Provider makes breaking change')
  }

  environment {
    SERVICE_NAME = "consumer-a"
    BRANCH_NAME = env.GIT_BRANCH.replace("origin/", "")
    PACT_BROKER_URL = "http://localhost:9292"
    PB_RETRY_OPTION = "--retry-while-unknown=4 --retry-interval=10"
    PENDING_PROVIDER_RUN_CONTRACT_JOB = "${PENDING_PROVIDER}-run-contract-tests"
  }

  stages {
    stage('Build & Test') {
      steps {
        sh 'mvn clean verify'
      }
    }
    stage('[As Consumer] Publish Pact Contract') {
      steps {
        sh 'curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.88.83/pact-1.88.83-linux-x86_64.tar.gz'
        sh 'tar xzf pact-1.88.83-linux-x86_64.tar.gz'
        dir('pact/bin') {
            script {
              env.SIT_VERSION = sh(script: "./pact-broker describe-version -a ${SERVICE_NAME} -b ${PACT_BROKER_URL} -l SIT_ENV | tail -1 | cut -f 1 -d \\|", returnStdout: true).trim()
            }
            sh "./pact-broker publish ../../target/pacts/ -a ${GIT_COMMIT} -t ${BRANCH_NAME} -b ${PACT_BROKER_URL}"
        }
        echo "Current SIT version: " + SIT_VERSION
      }
    }

    stage('Can I deploy on SIT') {
      when {
        expression { return params.PENDING_PROVIDER == ''; }
      }
      steps {
        dir('pact/bin') {
          script {
            if (env.SIT_VERSION == 'Pacticipant version not found') {//Tag the first pass contract as verified on SIT
              sh "./pact-broker create-version-tag -t SIT_ENV -a ${SERVICE_NAME} -e ${GIT_COMMIT} -b ${PACT_BROKER_URL}"
            }
            sh "./pact-broker can-i-deploy --to SIT_ENV -a ${SERVICE_NAME} -e ${GIT_COMMIT} -b ${PACT_BROKER_URL} ${PB_RETRY_OPTION}"
          }
        }
      }
    }
    stage('Can I deploy on SIT - Ignore pending Provider') {
      when {
        expression { return params.PENDING_PROVIDER != ''; }
      }
      steps {
        dir('pact/bin') {
          sh "./pact-broker can-i-deploy --to SIT_ENV -a ${SERVICE_NAME} -e ${GIT_COMMIT} -b ${PACT_BROKER_URL} --ignore=${PENDING_PROVIDER} ${PB_RETRY_OPTION}"
        }
      }
    }
    stage('Can I deploy with latest version of pending Provider') {
      when {
        expression { return params.PENDING_PROVIDER != ''; }
      }
      steps {
        script {
          if (params.PROVIDER_BRANCH_NAME == '') {
              currentBuild.result = "FAILURE"
              throw new Exception("PROVIDER_BRANCH_NAME must NOT empty!")
          }
          build job: env.PENDING_PROVIDER_RUN_CONTRACT_JOB,
                    parameters: [
                        string(name: 'pactConsumerName', value: "${SERVICE_NAME}"),
                        string(name: 'pactConsumerTags', value: "${BRANCH_NAME}"),
                        string(name: 'PROVIDER_TAG', value: "${PENDING_PROVIDER}")
                    ]
        }
        dir('pact/bin') {
          sh "./pact-broker can-i-deploy --to ${PROVIDER_BRANCH_NAME} -a ${SERVICE_NAME} -e ${GIT_COMMIT} -a ${PENDING_PROVIDER} -e ${PROVIDER_BRANCH_NAME} -b ${PACT_BROKER_URL} ${PB_RETRY_OPTION}"
        }
      }
    }

    stage('Mark as verified on SIT') {
      steps {
        dir('pact/bin') {
            sh "./pact-broker create-version-tag -t SIT_ENV -a ${SERVICE_NAME} -e ${GIT_COMMIT} -b ${PACT_BROKER_URL}"
        }
      }
    }

    stage('Deploy on SIT') {
      when {
        expression { return env.BRANCH_NAME == 'master'; }
      }
      steps {
        dir('pact/bin') {
            sh "./pact-broker record-deployment --environment=SIT -a ${SERVICE_NAME} -e ${GIT_COMMIT} -b ${PACT_BROKER_URL}"
        }
      }
    }
  }
}
